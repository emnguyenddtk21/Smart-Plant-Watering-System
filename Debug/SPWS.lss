
SPWS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00000638  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d99  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000946  00000000  00000000  00001539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d5  00000000  00000000  00001e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000273  00000000  00000000  00002ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 31       	cpi	r26, 0x12	; 18
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 39 01 	call	0x272	; 0x272 <main>
  88:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <actuator_init>:
#include "actuator.h"

void actuator_init (void)
{
	AC_DDR |= 0X0F;
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8f 60       	ori	r24, 0x0F	; 15
  94:	8a b9       	out	0x0a, r24	; 10
  96:	08 95       	ret

00000098 <turn_pump_on>:
}

void turn_pump_on (void)
{
	AC_PORT |= (1 << PUMP_OUT);
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	8b b9       	out	0x0b, r24	; 11
  9e:	08 95       	ret

000000a0 <turn_pump_off>:
}

void turn_pump_off (void)
{
	AC_PORT &= ~(1 << PUMP_OUT);
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	8b b9       	out	0x0b, r24	; 11
  a6:	08 95       	ret

000000a8 <turn_led_on>:
}

void turn_led_on(char color)
{
    AC_PORT |= (1 << color);
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <turn_led_on+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	8a 95       	dec	r24
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <turn_led_on+0x8>
  b8:	29 2b       	or	r18, r25
  ba:	2b b9       	out	0x0b, r18	; 11
  bc:	08 95       	ret

000000be <turn_led_off>:
}

void turn_led_off(char color)
{
	AC_PORT &= ~(1 << color);
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <turn_led_off+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <turn_led_off+0x8>
  ce:	20 95       	com	r18
  d0:	29 23       	and	r18, r25
  d2:	2b b9       	out	0x0b, r18	; 11
  d4:	08 95       	ret

000000d6 <ADC_init>:
#include "adc.h"

void ADC_init(void)
{
    DDRC = 0x00;
  d6:	17 b8       	out	0x07, r1	; 7
    ADCSRA = 0x87;
  d8:	87 e8       	ldi	r24, 0x87	; 135
  da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    ADMUX = 0x40;
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  e4:	08 95       	ret

000000e6 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)
{
    ADMUX = 0x40 | (channel & 0x07);
  e6:	87 70       	andi	r24, 0x07	; 7
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    ADCSRA |= (1 << ADSC);
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
    while (!(ADCSRA & (1 << ADIF)));
  f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fc:	84 ff       	sbrs	r24, 4
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <ADC_read+0x12>
    ADCSRA |= (1 << ADIF);
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 61       	ori	r24, 0x10	; 16
 108:	80 83       	st	Z, r24
    return ADCW;
 10a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 112:	08 95       	ret

00000114 <button_init>:
#include "button.h"
#include "timer.h" 

void button_init(void) {
    BTN_DDR &= ~((1 << BTN_MODE) | (1 << BTN_PUMP));
 114:	84 b1       	in	r24, 0x04	; 4
 116:	8c 7f       	andi	r24, 0xFC	; 252
 118:	84 b9       	out	0x04, r24	; 4
    BTN_PORT |= (1 << BTN_MODE) | (1 << BTN_PUMP);
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	83 60       	ori	r24, 0x03	; 3
 11e:	85 b9       	out	0x05, r24	; 5
 120:	08 95       	ret

00000122 <mode_read>:
}

char mode_read(void)
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
	static uint32_t last_press = 0;
	if (!(BTN_PINR & (1 << BTN_MODE)))
 126:	18 99       	sbic	0x03, 0	; 3
 128:	20 c0       	rjmp	.+64     	; 0x16a <mode_read+0x48>
	{
		if (millis() - last_press > DEBOUNCE_DELAY)
 12a:	0e 94 b1 01 	call	0x362	; 0x362 <millis>
 12e:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <last_press.1617>
 132:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <last_press.1617+0x1>
 136:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <last_press.1617+0x2>
 13a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <last_press.1617+0x3>
 13e:	dc 01       	movw	r26, r24
 140:	cb 01       	movw	r24, r22
 142:	80 1b       	sub	r24, r16
 144:	91 0b       	sbc	r25, r17
 146:	a2 0b       	sbc	r26, r18
 148:	b3 0b       	sbc	r27, r19
 14a:	c3 97       	sbiw	r24, 0x33	; 51
 14c:	a1 05       	cpc	r26, r1
 14e:	b1 05       	cpc	r27, r1
 150:	70 f0       	brcs	.+28     	; 0x16e <mode_read+0x4c>
		{
			last_press = millis();
 152:	0e 94 b1 01 	call	0x362	; 0x362 <millis>
 156:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <last_press.1617>
 15a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <last_press.1617+0x1>
 15e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <last_press.1617+0x2>
 162:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <last_press.1617+0x3>
			return 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	03 c0       	rjmp	.+6      	; 0x170 <mode_read+0x4e>
		}
	}
	return 0;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	01 c0       	rjmp	.+2      	; 0x170 <mode_read+0x4e>
 16e:	80 e0       	ldi	r24, 0x00	; 0
}
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <pump_read>:

char pump_read(void)
{
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
	static uint32_t last_press = 0;
	if (!(BTN_PINR & (1 << BTN_PUMP)))
 17a:	19 99       	sbic	0x03, 1	; 3
 17c:	20 c0       	rjmp	.+64     	; 0x1be <pump_read+0x48>
	{
		if (millis() - last_press > DEBOUNCE_DELAY)
 17e:	0e 94 b1 01 	call	0x362	; 0x362 <millis>
 182:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 18e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 192:	dc 01       	movw	r26, r24
 194:	cb 01       	movw	r24, r22
 196:	80 1b       	sub	r24, r16
 198:	91 0b       	sbc	r25, r17
 19a:	a2 0b       	sbc	r26, r18
 19c:	b3 0b       	sbc	r27, r19
 19e:	c3 97       	sbiw	r24, 0x33	; 51
 1a0:	a1 05       	cpc	r26, r1
 1a2:	b1 05       	cpc	r27, r1
 1a4:	70 f0       	brcs	.+28     	; 0x1c2 <pump_read+0x4c>
		{
			last_press = millis();
 1a6:	0e 94 b1 01 	call	0x362	; 0x362 <millis>
 1aa:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1b6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			return 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <pump_read+0x4e>
		}
	}
	return 0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <pump_read+0x4e>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <MODE_AUTO>:
	return 0;
}

void MODE_AUTO()
{
	if ((moisture < MOIST_THRESHOLD || celsius > TEMP_THRESHOLD))
 1ca:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <moisture>
 1ce:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <moisture+0x1>
 1d2:	88 97       	sbiw	r24, 0x28	; 40
 1d4:	80 f0       	brcs	.+32     	; 0x1f6 <MODE_AUTO+0x2c>
 1d6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <celsius>
 1da:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <celsius+0x1>
 1de:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <celsius+0x2>
 1e2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <celsius+0x3>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	40 ef       	ldi	r20, 0xF0	; 240
 1ec:	51 e4       	ldi	r21, 0x41	; 65
 1ee:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__gesf2>
 1f2:	18 16       	cp	r1, r24
 1f4:	9c f4       	brge	.+38     	; 0x21c <MODE_AUTO+0x52>
	{
		turn_pump_on();
 1f6:	0e 94 4c 00 	call	0x98	; 0x98 <turn_pump_on>
		turn_led_on(LED_WATERING);
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 54 00 	call	0xa8	; 0xa8 <turn_led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	89 e6       	ldi	r24, 0x69	; 105
 204:	98 e1       	ldi	r25, 0x18	; 24
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <MODE_AUTO+0x3c>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <MODE_AUTO+0x46>
 210:	00 00       	nop
		_delay_ms(1000);
		turn_pump_off();
 212:	0e 94 50 00 	call	0xa0	; 0xa0 <turn_pump_off>
		turn_led_off(LED_WATERING);
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 5f 00 	call	0xbe	; 0xbe <turn_led_off>
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	80 e7       	ldi	r24, 0x70	; 112
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <MODE_AUTO+0x58>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <MODE_AUTO+0x62>
 22c:	00 00       	nop
 22e:	08 95       	ret

00000230 <MODE_MANUAL>:
	_delay_ms(100);
}

void MODE_MANUAL()
{
	if (pump_read() == 1)
 230:	0e 94 bb 00 	call	0x176	; 0x176 <pump_read>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	99 f4       	brne	.+38     	; 0x25e <MODE_MANUAL+0x2e>
	{
		turn_pump_on();
 238:	0e 94 4c 00 	call	0x98	; 0x98 <turn_pump_on>
		turn_led_on(LED_WATERING);
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	0e 94 54 00 	call	0xa8	; 0xa8 <turn_led_on>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	89 e6       	ldi	r24, 0x69	; 105
 246:	98 e1       	ldi	r25, 0x18	; 24
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <MODE_MANUAL+0x18>
 250:	00 c0       	rjmp	.+0      	; 0x252 <MODE_MANUAL+0x22>
 252:	00 00       	nop
		_delay_ms(1000);
		turn_pump_off();
 254:	0e 94 50 00 	call	0xa0	; 0xa0 <turn_pump_off>
		turn_led_off(LED_WATERING);
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	0e 94 5f 00 	call	0xbe	; 0xbe <turn_led_off>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <MODE_MANUAL+0x34>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <MODE_MANUAL+0x3e>
 26e:	00 00       	nop
 270:	08 95       	ret

00000272 <main>:
void MODE_MANUAL(void);

int main(void)
{
	char mode = AUTO;
	button_init();
 272:	0e 94 8a 00 	call	0x114	; 0x114 <button_init>
	ADC_init();
 276:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_init>
	actuator_init();
 27a:	0e 94 48 00 	call	0x90	; 0x90 <actuator_init>
	timer_init();
 27e:	0e 94 82 01 	call	0x304	; 0x304 <timer_init>
	
	uint16_t adc_temp;
	uint32_t last_adc_time = 0;
 282:	c1 2c       	mov	r12, r1
 284:	d1 2c       	mov	r13, r1
 286:	76 01       	movw	r14, r12
void MODE_AUTO(void);
void MODE_MANUAL(void);

int main(void)
{
	char mode = AUTO;
 288:	c0 e0       	ldi	r28, 0x00	; 0
	uint16_t adc_temp;
	uint32_t last_adc_time = 0;

	while(1)
	{
		if (mode_read())  mode = 1 - mode;
 28a:	0e 94 91 00 	call	0x122	; 0x122 <mode_read>
 28e:	88 23       	and	r24, r24
 290:	19 f0       	breq	.+6      	; 0x298 <main+0x26>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	8c 1b       	sub	r24, r28
 296:	c8 2f       	mov	r28, r24
		
		if (millis() - last_adc_time >= 300UL)
 298:	0e 94 b1 01 	call	0x362	; 0x362 <millis>
 29c:	dc 01       	movw	r26, r24
 29e:	cb 01       	movw	r24, r22
 2a0:	8c 19       	sub	r24, r12
 2a2:	9d 09       	sbc	r25, r13
 2a4:	ae 09       	sbc	r26, r14
 2a6:	bf 09       	sbc	r27, r15
 2a8:	8c 32       	cpi	r24, 0x2C	; 44
 2aa:	91 40       	sbci	r25, 0x01	; 1
 2ac:	a1 05       	cpc	r26, r1
 2ae:	b1 05       	cpc	r27, r1
 2b0:	08 f1       	brcs	.+66     	; 0x2f4 <main+0x82>
		{
			adc_temp = ADC_read(0);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_read>
			celsius = adc_temp * 0.488f;
 2b8:	bc 01       	movw	r22, r24
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 bc 01 	call	0x378	; 0x378 <__floatunsisf>
 2c2:	23 e2       	ldi	r18, 0x23	; 35
 2c4:	3b ed       	ldi	r19, 0xDB	; 219
 2c6:	49 ef       	ldi	r20, 0xF9	; 249
 2c8:	5e e3       	ldi	r21, 0x3E	; 62
 2ca:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__mulsf3>
 2ce:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <celsius>
 2d2:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <celsius+0x1>
 2d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <celsius+0x2>
 2da:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <celsius+0x3>
			moisture = ADC_read(1);
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_read>
 2e4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <moisture+0x1>
 2e8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <moisture>
			last_adc_time = millis();
 2ec:	0e 94 b1 01 	call	0x362	; 0x362 <millis>
 2f0:	6b 01       	movw	r12, r22
 2f2:	7c 01       	movw	r14, r24
		}
		
		if (mode == AUTO)
 2f4:	c1 11       	cpse	r28, r1
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <main+0x8c>
		{
			MODE_AUTO();
 2f8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MODE_AUTO>
 2fc:	c6 cf       	rjmp	.-116    	; 0x28a <main+0x18>
		}	
		else
		{
			MODE_MANUAL();
 2fe:	0e 94 18 01 	call	0x230	; 0x230 <MODE_MANUAL>
 302:	c3 cf       	rjmp	.-122    	; 0x28a <main+0x18>

00000304 <timer_init>:

static volatile uint32_t timer_millis = 0;

void timer_init(void)
{
    TCCR0A = (1 << WGM01);
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1 << CS01) | (1 << CS00);
 308:	93 e0       	ldi	r25, 0x03	; 3
 30a:	95 bd       	out	0x25, r25	; 37
    OCR0A = 124;
 30c:	9c e7       	ldi	r25, 0x7C	; 124
 30e:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1 << OCIE0A);
 310:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    sei();
 314:	78 94       	sei
 316:	08 95       	ret

00000318 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
    timer_millis++;
 32a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <timer_millis>
 32e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <timer_millis+0x1>
 332:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <timer_millis+0x2>
 336:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <timer_millis+0x3>
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	a1 1d       	adc	r26, r1
 33e:	b1 1d       	adc	r27, r1
 340:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <timer_millis>
 344:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <timer_millis+0x1>
 348:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <timer_millis+0x2>
 34c:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <timer_millis+0x3>
}
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <millis>:

uint32_t millis(void)
{
    uint32_t ms;

    cli();
 362:	f8 94       	cli
    ms = timer_millis;
 364:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <timer_millis>
 368:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <timer_millis+0x1>
 36c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <timer_millis+0x2>
 370:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <timer_millis+0x3>
    sei();
 374:	78 94       	sei

    return ms;
}
 376:	08 95       	ret

00000378 <__floatunsisf>:
 378:	e8 94       	clt
 37a:	09 c0       	rjmp	.+18     	; 0x38e <__floatsisf+0x12>

0000037c <__floatsisf>:
 37c:	97 fb       	bst	r25, 7
 37e:	3e f4       	brtc	.+14     	; 0x38e <__floatsisf+0x12>
 380:	90 95       	com	r25
 382:	80 95       	com	r24
 384:	70 95       	com	r23
 386:	61 95       	neg	r22
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	8f 4f       	sbci	r24, 0xFF	; 255
 38c:	9f 4f       	sbci	r25, 0xFF	; 255
 38e:	99 23       	and	r25, r25
 390:	a9 f0       	breq	.+42     	; 0x3bc <__floatsisf+0x40>
 392:	f9 2f       	mov	r31, r25
 394:	96 e9       	ldi	r25, 0x96	; 150
 396:	bb 27       	eor	r27, r27
 398:	93 95       	inc	r25
 39a:	f6 95       	lsr	r31
 39c:	87 95       	ror	r24
 39e:	77 95       	ror	r23
 3a0:	67 95       	ror	r22
 3a2:	b7 95       	ror	r27
 3a4:	f1 11       	cpse	r31, r1
 3a6:	f8 cf       	rjmp	.-16     	; 0x398 <__floatsisf+0x1c>
 3a8:	fa f4       	brpl	.+62     	; 0x3e8 <__floatsisf+0x6c>
 3aa:	bb 0f       	add	r27, r27
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <__floatsisf+0x36>
 3ae:	60 ff       	sbrs	r22, 0
 3b0:	1b c0       	rjmp	.+54     	; 0x3e8 <__floatsisf+0x6c>
 3b2:	6f 5f       	subi	r22, 0xFF	; 255
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	8f 4f       	sbci	r24, 0xFF	; 255
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	16 c0       	rjmp	.+44     	; 0x3e8 <__floatsisf+0x6c>
 3bc:	88 23       	and	r24, r24
 3be:	11 f0       	breq	.+4      	; 0x3c4 <__floatsisf+0x48>
 3c0:	96 e9       	ldi	r25, 0x96	; 150
 3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <__floatsisf+0x6a>
 3c4:	77 23       	and	r23, r23
 3c6:	21 f0       	breq	.+8      	; 0x3d0 <__floatsisf+0x54>
 3c8:	9e e8       	ldi	r25, 0x8E	; 142
 3ca:	87 2f       	mov	r24, r23
 3cc:	76 2f       	mov	r23, r22
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <__floatsisf+0x5e>
 3d0:	66 23       	and	r22, r22
 3d2:	71 f0       	breq	.+28     	; 0x3f0 <__floatsisf+0x74>
 3d4:	96 e8       	ldi	r25, 0x86	; 134
 3d6:	86 2f       	mov	r24, r22
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	2a f0       	brmi	.+10     	; 0x3e8 <__floatsisf+0x6c>
 3de:	9a 95       	dec	r25
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	88 1f       	adc	r24, r24
 3e6:	da f7       	brpl	.-10     	; 0x3de <__floatsisf+0x62>
 3e8:	88 0f       	add	r24, r24
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	97 f9       	bld	r25, 7
 3f0:	08 95       	ret

000003f2 <__gesf2>:
 3f2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_cmp>
 3f6:	08 f4       	brcc	.+2      	; 0x3fa <__gesf2+0x8>
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	08 95       	ret

000003fc <__mulsf3>:
 3fc:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3x>
 400:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_round>
 404:	0e 94 98 02 	call	0x530	; 0x530 <__fp_pscA>
 408:	38 f0       	brcs	.+14     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40a:	0e 94 9f 02 	call	0x53e	; 0x53e <__fp_pscB>
 40e:	20 f0       	brcs	.+8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 410:	95 23       	and	r25, r21
 412:	11 f0       	breq	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_inf>
 418:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_nan>
 41c:	11 24       	eor	r1, r1
 41e:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_szero>

00000422 <__mulsf3x>:
 422:	0e 94 b7 02 	call	0x56e	; 0x56e <__fp_split3>
 426:	70 f3       	brcs	.-36     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>

00000428 <__mulsf3_pse>:
 428:	95 9f       	mul	r25, r21
 42a:	c1 f3       	breq	.-16     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 42c:	95 0f       	add	r25, r21
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	55 1f       	adc	r21, r21
 432:	62 9f       	mul	r22, r18
 434:	f0 01       	movw	r30, r0
 436:	72 9f       	mul	r23, r18
 438:	bb 27       	eor	r27, r27
 43a:	f0 0d       	add	r31, r0
 43c:	b1 1d       	adc	r27, r1
 43e:	63 9f       	mul	r22, r19
 440:	aa 27       	eor	r26, r26
 442:	f0 0d       	add	r31, r0
 444:	b1 1d       	adc	r27, r1
 446:	aa 1f       	adc	r26, r26
 448:	64 9f       	mul	r22, r20
 44a:	66 27       	eor	r22, r22
 44c:	b0 0d       	add	r27, r0
 44e:	a1 1d       	adc	r26, r1
 450:	66 1f       	adc	r22, r22
 452:	82 9f       	mul	r24, r18
 454:	22 27       	eor	r18, r18
 456:	b0 0d       	add	r27, r0
 458:	a1 1d       	adc	r26, r1
 45a:	62 1f       	adc	r22, r18
 45c:	73 9f       	mul	r23, r19
 45e:	b0 0d       	add	r27, r0
 460:	a1 1d       	adc	r26, r1
 462:	62 1f       	adc	r22, r18
 464:	83 9f       	mul	r24, r19
 466:	a0 0d       	add	r26, r0
 468:	61 1d       	adc	r22, r1
 46a:	22 1f       	adc	r18, r18
 46c:	74 9f       	mul	r23, r20
 46e:	33 27       	eor	r19, r19
 470:	a0 0d       	add	r26, r0
 472:	61 1d       	adc	r22, r1
 474:	23 1f       	adc	r18, r19
 476:	84 9f       	mul	r24, r20
 478:	60 0d       	add	r22, r0
 47a:	21 1d       	adc	r18, r1
 47c:	82 2f       	mov	r24, r18
 47e:	76 2f       	mov	r23, r22
 480:	6a 2f       	mov	r22, r26
 482:	11 24       	eor	r1, r1
 484:	9f 57       	subi	r25, 0x7F	; 127
 486:	50 40       	sbci	r21, 0x00	; 0
 488:	9a f0       	brmi	.+38     	; 0x4b0 <__mulsf3_pse+0x88>
 48a:	f1 f0       	breq	.+60     	; 0x4c8 <__mulsf3_pse+0xa0>
 48c:	88 23       	and	r24, r24
 48e:	4a f0       	brmi	.+18     	; 0x4a2 <__mulsf3_pse+0x7a>
 490:	ee 0f       	add	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	bb 1f       	adc	r27, r27
 496:	66 1f       	adc	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	88 1f       	adc	r24, r24
 49c:	91 50       	subi	r25, 0x01	; 1
 49e:	50 40       	sbci	r21, 0x00	; 0
 4a0:	a9 f7       	brne	.-22     	; 0x48c <__mulsf3_pse+0x64>
 4a2:	9e 3f       	cpi	r25, 0xFE	; 254
 4a4:	51 05       	cpc	r21, r1
 4a6:	80 f0       	brcs	.+32     	; 0x4c8 <__mulsf3_pse+0xa0>
 4a8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_inf>
 4ac:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_szero>
 4b0:	5f 3f       	cpi	r21, 0xFF	; 255
 4b2:	e4 f3       	brlt	.-8      	; 0x4ac <__mulsf3_pse+0x84>
 4b4:	98 3e       	cpi	r25, 0xE8	; 232
 4b6:	d4 f3       	brlt	.-12     	; 0x4ac <__mulsf3_pse+0x84>
 4b8:	86 95       	lsr	r24
 4ba:	77 95       	ror	r23
 4bc:	67 95       	ror	r22
 4be:	b7 95       	ror	r27
 4c0:	f7 95       	ror	r31
 4c2:	e7 95       	ror	r30
 4c4:	9f 5f       	subi	r25, 0xFF	; 255
 4c6:	c1 f7       	brne	.-16     	; 0x4b8 <__mulsf3_pse+0x90>
 4c8:	fe 2b       	or	r31, r30
 4ca:	88 0f       	add	r24, r24
 4cc:	91 1d       	adc	r25, r1
 4ce:	96 95       	lsr	r25
 4d0:	87 95       	ror	r24
 4d2:	97 f9       	bld	r25, 7
 4d4:	08 95       	ret

000004d6 <__fp_cmp>:
 4d6:	99 0f       	add	r25, r25
 4d8:	00 08       	sbc	r0, r0
 4da:	55 0f       	add	r21, r21
 4dc:	aa 0b       	sbc	r26, r26
 4de:	e0 e8       	ldi	r30, 0x80	; 128
 4e0:	fe ef       	ldi	r31, 0xFE	; 254
 4e2:	16 16       	cp	r1, r22
 4e4:	17 06       	cpc	r1, r23
 4e6:	e8 07       	cpc	r30, r24
 4e8:	f9 07       	cpc	r31, r25
 4ea:	c0 f0       	brcs	.+48     	; 0x51c <__fp_cmp+0x46>
 4ec:	12 16       	cp	r1, r18
 4ee:	13 06       	cpc	r1, r19
 4f0:	e4 07       	cpc	r30, r20
 4f2:	f5 07       	cpc	r31, r21
 4f4:	98 f0       	brcs	.+38     	; 0x51c <__fp_cmp+0x46>
 4f6:	62 1b       	sub	r22, r18
 4f8:	73 0b       	sbc	r23, r19
 4fa:	84 0b       	sbc	r24, r20
 4fc:	95 0b       	sbc	r25, r21
 4fe:	39 f4       	brne	.+14     	; 0x50e <__fp_cmp+0x38>
 500:	0a 26       	eor	r0, r26
 502:	61 f0       	breq	.+24     	; 0x51c <__fp_cmp+0x46>
 504:	23 2b       	or	r18, r19
 506:	24 2b       	or	r18, r20
 508:	25 2b       	or	r18, r21
 50a:	21 f4       	brne	.+8      	; 0x514 <__fp_cmp+0x3e>
 50c:	08 95       	ret
 50e:	0a 26       	eor	r0, r26
 510:	09 f4       	brne	.+2      	; 0x514 <__fp_cmp+0x3e>
 512:	a1 40       	sbci	r26, 0x01	; 1
 514:	a6 95       	lsr	r26
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	81 1d       	adc	r24, r1
 51a:	81 1d       	adc	r24, r1
 51c:	08 95       	ret

0000051e <__fp_inf>:
 51e:	97 f9       	bld	r25, 7
 520:	9f 67       	ori	r25, 0x7F	; 127
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	08 95       	ret

0000052a <__fp_nan>:
 52a:	9f ef       	ldi	r25, 0xFF	; 255
 52c:	80 ec       	ldi	r24, 0xC0	; 192
 52e:	08 95       	ret

00000530 <__fp_pscA>:
 530:	00 24       	eor	r0, r0
 532:	0a 94       	dec	r0
 534:	16 16       	cp	r1, r22
 536:	17 06       	cpc	r1, r23
 538:	18 06       	cpc	r1, r24
 53a:	09 06       	cpc	r0, r25
 53c:	08 95       	ret

0000053e <__fp_pscB>:
 53e:	00 24       	eor	r0, r0
 540:	0a 94       	dec	r0
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	14 06       	cpc	r1, r20
 548:	05 06       	cpc	r0, r21
 54a:	08 95       	ret

0000054c <__fp_round>:
 54c:	09 2e       	mov	r0, r25
 54e:	03 94       	inc	r0
 550:	00 0c       	add	r0, r0
 552:	11 f4       	brne	.+4      	; 0x558 <__fp_round+0xc>
 554:	88 23       	and	r24, r24
 556:	52 f0       	brmi	.+20     	; 0x56c <__fp_round+0x20>
 558:	bb 0f       	add	r27, r27
 55a:	40 f4       	brcc	.+16     	; 0x56c <__fp_round+0x20>
 55c:	bf 2b       	or	r27, r31
 55e:	11 f4       	brne	.+4      	; 0x564 <__fp_round+0x18>
 560:	60 ff       	sbrs	r22, 0
 562:	04 c0       	rjmp	.+8      	; 0x56c <__fp_round+0x20>
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	8f 4f       	sbci	r24, 0xFF	; 255
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	08 95       	ret

0000056e <__fp_split3>:
 56e:	57 fd       	sbrc	r21, 7
 570:	90 58       	subi	r25, 0x80	; 128
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	59 f0       	breq	.+22     	; 0x58e <__fp_splitA+0x10>
 578:	5f 3f       	cpi	r21, 0xFF	; 255
 57a:	71 f0       	breq	.+28     	; 0x598 <__fp_splitA+0x1a>
 57c:	47 95       	ror	r20

0000057e <__fp_splitA>:
 57e:	88 0f       	add	r24, r24
 580:	97 fb       	bst	r25, 7
 582:	99 1f       	adc	r25, r25
 584:	61 f0       	breq	.+24     	; 0x59e <__fp_splitA+0x20>
 586:	9f 3f       	cpi	r25, 0xFF	; 255
 588:	79 f0       	breq	.+30     	; 0x5a8 <__fp_splitA+0x2a>
 58a:	87 95       	ror	r24
 58c:	08 95       	ret
 58e:	12 16       	cp	r1, r18
 590:	13 06       	cpc	r1, r19
 592:	14 06       	cpc	r1, r20
 594:	55 1f       	adc	r21, r21
 596:	f2 cf       	rjmp	.-28     	; 0x57c <__fp_split3+0xe>
 598:	46 95       	lsr	r20
 59a:	f1 df       	rcall	.-30     	; 0x57e <__fp_splitA>
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <__fp_splitA+0x30>
 59e:	16 16       	cp	r1, r22
 5a0:	17 06       	cpc	r1, r23
 5a2:	18 06       	cpc	r1, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	f1 cf       	rjmp	.-30     	; 0x58a <__fp_splitA+0xc>
 5a8:	86 95       	lsr	r24
 5aa:	71 05       	cpc	r23, r1
 5ac:	61 05       	cpc	r22, r1
 5ae:	08 94       	sec
 5b0:	08 95       	ret

000005b2 <__fp_zero>:
 5b2:	e8 94       	clt

000005b4 <__fp_szero>:
 5b4:	bb 27       	eor	r27, r27
 5b6:	66 27       	eor	r22, r22
 5b8:	77 27       	eor	r23, r23
 5ba:	cb 01       	movw	r24, r22
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <_exit>:
 5c0:	f8 94       	cli

000005c2 <__stop_program>:
 5c2:	ff cf       	rjmp	.-2      	; 0x5c2 <__stop_program>
